generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  description  String?
  profileImage String?
  updatedAt    DateTime @default(now()) // 기본값 추가
  createdAt    DateTime @default(now())
  friendS      Friend[] @relation("UserFriendS")
  friendR      Friend[] @relation("UserFriendR")
  Diary        Diary[]

  // 사용자와 Refresh Token 간의 일대다 관계 설정
  refreshTokens RefreshToken[]

  favorites   Favorite[]
  comments    Comment[]
  latestEmoji String?
  isFriend    Boolean    @default(false)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 사용자와의 관계 정의
  user User @relation(fields: [userId], references: [id])
}

model Friend {
  id             String  @id @default(uuid())
  sentUser       User    @relation("UserFriendS", fields: [sentUserId], references: [id])
  sentUserId     String
  receivedUser   User    @relation("UserFriendR", fields: [receivedUserId], references: [id])
  receivedUserId String
  status         Boolean @default(false)

  @@unique([sentUserId, receivedUserId])
}

model Diary {
  id            String   @id @default(uuid())
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  createdDate   DateTime
  title         String
  content       String
  is_public     String
  emoji         String
  favoriteCount Int      @default(value: 0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  favorites Favorite[]
  comments  Comment[]
}

model Favorite {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId String @map("diary_id")
  userId  String @map("user_id")

  @@id([diaryId, userId])
}

model Comment {
  id            String    @id @default(uuid())
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  diary         Diary     @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId       String
  content       String
  nestedComment String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reply         Comment?  @relation("comment", fields: [nestedComment], references: [id], onDelete: Cascade)
  reComment     Comment[] @relation("comment")
}

model Emoji {
  id         Int     @id @default(autoincrement())
  type       String
  sadness    String?
  surprise   String?
  happiness  String?
  aversion   String?
  unrest     String?
  anger      String?
  neutrality String?

  @@map("emojis")
}
